" Use Vim settings, rather than Vi settings (usually better).
" This must be first, because it changes other options as a side effect.
set nocompatible

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" The base vundle plugin
Plugin 'VundleVim/Vundle.vim'

" ***********************
" CODING SPECIFIC PLUGINS
" ***********************

" Git integration with vim
Plugin 'tpope/vim-fugitive'

" Makes fugitive play nicely with eclim (specifically, :Gpush breaks without this)
Plugin 'tpope/vim-dispatch'

" I use json files somewhat frequently; this makes them better.
Plugin 'elzr/vim-json'

" jsonnet is a relative of json that we also sometimes use.
Plugin 'google/vim-jsonnet'

" Very nice autocomplete
Plugin 'Valloric/YouCompleteMe'

" ctags integration
Plugin 'szw/vim-tags'

" python auto-formatting
Plugin 'psf/black'

" python folding
Plugin 'tmhedberg/SimpylFold'

" **********************
" GENERAL VIM UX PLUGINS
" **********************

" A decent 256 color scheme
Plugin 'junegunn/seoul256.vim'

" Makes switching windows nicer when using tmux and vim together
Plugin 'christoomey/vim-tmux-navigator'

" Nice filesystem browsing
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdtree-project-plugin'

" Add git status directly to the nerdtree window
Plugin 'Xuyuanp/nerdtree-git-plugin'

" Press <leader>yw and <leader>pw to yank and paste windows, for easier window
" swapping
Plugin 'wesQ3/vim-windowswap'

" A nice interface for easily navigating an open window.
Plugin 'Lokaltog/vim-easymotion'

" See undo branching history
Plugin 'sjl/gundo.vim'

" Simple mappings for toggling the quickfix and locationlist windows
Plugin 'Valloric/ListToggle'

" Simple vim script to add a :Shuffle command in visual mode
Plugin 'vim-scripts/shuffle.vim'

" Toggle comment blocks with gc
Plugin 'tpope/vim-commentary'

" Temporarily highlight the last-yanked thing
Plugin 'machakann/vim-highlightedyank'

" Use Ctrl-P for finding files
Plugin 'ctrlpvim/ctrlp.vim'

call vundle#end()

" Allow filetype detection, plugins, and indenting
filetype plugin indent on

syntax on

" Paredit mode in the lisp plugin is driving me insane...
let g:paredit_mode = 0

" I've taken a liking to this colorscheme for the moment.
let g:seoul256_background = 233
colorscheme seoul256

" The preview window is what's on top, giving more information about the
" possible completions.  This setting makes it go away when you leave insert
" mode.
let g:ycm_autoclose_preview_window_after_insertion=1

let g:ycm_server_log_level='debug'
" YCM was complaining at me that I needed to set the encoding to utf-8.
set encoding=utf-8

" This specifies paths that YCM will not ask about when loading a
" .ycm_extra_conf.py file.
let g:ycm_extra_conf_globlist = ['~/classes/my_own_learning/neural_nets/*']

let g:ycm_filetype_blacklist = {
    \ 'tex': 1
    \}

" Let's use python3, instead of python2, to take advantage of type hints
let g:ycm_python_binary_path='python'

" NERDTree shortcuts, for browsing the filesystem
noremap <leader>nt :NERDTreeToggle<CR>

" Gundo.vim shortcuts
noremap <leader>u :GundoToggle<CR>

" easymotion shortcuts
let g:EasyMotion_smartcase = 1
let g:EasyMotion_add_search_history = 0
let g:EasyMotion_landing_highlight = 0
nmap <Leader>s <Plug>(easymotion-overwin-line)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Show bookmarks by default in the NERDTree
let NERDTreeShowBookmarks = 1
let NERDTreeMapOpenVSplit = 'v'
let NERDTreeMapOpenSplit = 's'

" If all we have left is the NERDTree, close it.
autocmd bufenter * if (winnr("$") == 1
                       \ && exists("b:NERDTreeType")
                       \ && b:NERDTreeType == "primary") | q | endif

let NERDTreeIgnore = ['\.pyc$', '\.swp$', '__pycache__[[dir]]']
let NERDTreeWinSize = 50

" Ignore unwanted files in ctrlp.vim
let g:ctrlp_custom_ignore = {
      \  'file': '\v\.(pyc|swp)$',
      \  'dir': '\v(\.git|_build)',
      \  }
"let g:ctrlp_user_command = {
      "\ 'types': {
      "\ 1: ['.git', 'cd %s && git ls-files'],
      "\ 2: ['.hg', 'hg --cwd %s locate -I .'],
      "\ },
      "\ 'fallback': 'ag %s -i --nocolor --nogroup --hidden
      "\ --ignore out
      "\ --ignore .git
      "\ --ignore .svn
      "\ --ignore .hg
      "\ --ignore .DS_Store
      "\ --ignore "*\.pyc"
      "\ -g ""'
      "\ }

" Don't split on - in identifiers for autocomplete purposes when editing latex.
au FileType tex set iskeyword+=-

" Fugitive shortcuts, for running vim commands
noremap <leader>gd :Gdiff<CR>
noremap <leader>gs :Gstatus<CR>
noremap <leader>gw :Gwrite<CR>
noremap <leader>gb :Gblame<CR>
noremap <leader>gps :Gpush<CR>
noremap <leader>gpl :Gpull<CR>

" <C-]> follows tags.  g<C-]> gives you a list when there are multiple matching definitions.  The
" latter is more useful.
noremap <C-]> g<C-]>

" Adds filenames and python variables as tags to the default in vim-tags.
let g:vim_tags_project_tags_command = "{CTAGS} -R {OPTIONS} --extra=+f --languages=python --python-kinds=+v {DIRECTORY} 2>/dev/null"

" Folding shortcut
nnoremap <Space> za

" Not sure what the deal is, but YCM messed up backspace, and this fixes it
set backspace=indent,eol,start

" Show line numbers
set number

" When editing a file, always jump to the last curser position
augroup open_file
  autocmd!
  autocmd VimEnter * NERDTree
  autocmd VimEnter * wincmd p
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\""  |
  \ endif
  " But don't do that when editing a git commit message - go back to the
  " first line
  autocmd BufReadPost *COMMIT_EDITMSG exe "normal 1G"
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

" Hit F4 while in insert mode to do a correct paste
set pastetoggle=<F4>

" Use spaces instead of tabs everywhere, and use two spaces instead of four.
set et sw=2 sts=2

" Some python goodies
augroup python
  autocmd!
  autocmd FileType python set foldlevel=1
  autocmd FileType python setlocal et sw=4 sts=4
augroup END

" Enforce 100 character line widths by wrapping automatically.
set textwidth=100

augroup textwidth
  autocmd!
  " HTML files can have pretty long lines, let's say.
  autocmd FileType htmldjango set textwidth=140
  autocmd FileType play2-html set textwidth=140
augroup END

" Highlight the 101st column, if possible
if exists('+colorcolumn')
  set colorcolumn=101
  augroup colorcolumn
    autocmd!
    autocmd FileType java,scala,markdown,text set colorcolumn=101  " see comment about tw above
    autocmd FileType htmldjango set colorcolumn=141
    autocmd FileType play2-html set colorcolumn=141
  augroup END
" If it isn't, highlight any characters that go over the allowed width.
else
  augroup colorcolumn
    au!
    au Filetype python,c,cpp,tex let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
    au Filetype java,scala,markdown,text let w:m2=matchadd('ErrorMsg', '\%>100v.\+', -1)
    au Filetype htmldjango let w:m2=matchadd('ErrorMsg', '\%>140v.\+', -1)
    au Filetype play2-html let w:m2=matchadd('ErrorMsg', '\%>140v.\+', -1)
  augroup END
endif

" And put an underline on the line where the cursor currently is, to save on
" searching for the cursor when switching windows.  But only in the active
" window.
augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

augroup filetype_stuff
  autocmd!
  " Use syntax folding for C++ because I don't have a good script for it
  autocmd FileType cpp set foldmethod=syntax

  " *.md files are markdown
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown

  " Use django file type for html files, 'cause I don't do any other html>
  " Except now I've started using play, which has *.scala.html files.
  autocmd BufEnter *.html if @% =~ "\.scala\.html" | setfiletype html | set syntax=play2-html | else | setfiletype htmldjango | endif
augroup END

" Add a highlight group to look out for trailing whitespace.
" Thanks to: http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight TrailingWhitespace ctermbg=red guibg=red
autocmd colorscheme * highlight TrailingWhitespace ctermbg=red guibg=red
2match TrailingWhitespace /\s\+$/
" Explanation of the following: whitespace: \s , one or more: \+ ,
"   current cursor position: \%# , negate: \@<! , end of line: $
autocmd InsertEnter * 2match TrailingWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * 2match TrailingWhitespace /\s\+$/
autocmd BufWinEnter * 2match TrailingWhitespace /\s\+$/
" The following apparently avoids a memory leak.
autocmd BufWinLeave * call clearmatches()

" Also highlight tab characters, which are evil.
set list
set listchars=tab:\ \ ,
highlight SpecialKey ctermbg=Red guibg=Red

" Automatically format comments when typing.  So if you type a long comment,
" vim will autowrap for you.
set formatoptions+=r

" Get rid of the annoying default plaintex for empty .tex files
let g:tex_flavor='latex'

" Add included files to autocomplete
set complete+=i

" Make a mapping to do spellchecking
nmap <silent> <F3> :setlocal spell spelllang=en_us<cr>

" Allow lower case to match upper case search targets.
set smartcase

" Always show the status line
set laststatus=2

" Status line stuff.
set statusline=%f                         "relative filename
set statusline+=%{fugitive#statusline()}  "git branch
"set statusline+=[%{&ff}]                   "file format
set statusline+=%h                        "help file flag
set statusline+=%m                        "modified flag
set statusline+=%r                        "read only flag
" Add syntastic stuff to the status line
set statusline+=%#warningmsg#
set statusline+=%*
"set statusline+=%y                        "filetype
set statusline+=%=                        "left/right separator
set statusline+=%c,                       "cursor column
set statusline+=%l/%L                     "cursor line/total lines
set statusline+=\ (byte:\ %o)                      "byte offset in the file
set statusline+=\ %P                      "percent through file

" diff mode should be vertical (fugitive looks at this option)
set diffopt=filler,vertical

" Show partial commands in the command buffer as they are being typed
set showcmd

" Don't use Ex mode.
map Q <nop>

" I tend to have files open for a long time, and sometimes update git repositories while a vim
" window is open.  This checks for updates to a file more frequently than at write time.
autocmd BufWinEnter,CursorHold,CursorHoldI * silent! checktime

" Get rid of annoying ctr-u in insert mode
imap <c-u> <nop>

" Tab completion for ex command-line (like :split)
set wildmenu
set wildmode=longest:full,full

" When at the top or bottom of the terminal, always leave 2 lines above the
" curser
set scrolloff=2

" Some folding options
set foldenable
set foldlevelstart=1
set foldopen=block,insert,hor,jump,mark,percent,quickfix,search,tag,undo

" Maps F2 to getting rid of the highlighting after a search - very nice
nmap <silent> <F2> :nohl<cr>:set spelllang=<cr>

" Maps F5 to cleaning up whitespace - convert tab characters to 4 spaces and
" remove any trailing whitespace.
nmap <F5> :%s/\s\+$//<cr>:%s/\t/    /g<cr>

" Somehow something maps C-J to something.  This will hopefully fix it.
let g:C_Ctrl_j = 'off'
let g:BASH_Ctrl_j = 'off'
nnoremap <C-J> <C-W>j

" Easier window resizing.
nmap + <C-W>+
nmap _ <C-W>-
"nmap <C-H> <C-W><
"nmap <C-L> <C-W>>

" Easier moving between windows
nmap <C-H> <C-W>h
nmap <C-L> <C-W>l
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k

set hlsearch " Highlight the last used search pattern
set ruler " show the cursor position all the time
