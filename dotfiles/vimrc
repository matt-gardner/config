" Use Vim settings, rather than Vi settings (usually better).
" This must be first, because it changes other options as a side effect.
set nocompatible

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" The base vundle plugin
Plugin 'gmarik/vundle'

" ***********************
" CODING SPECIFIC PLUGINS
" ***********************

" Very nice autocomplete
Plugin 'Valloric/YouCompleteMe'

" Template (snippet) code completion
Plugin 'SirVer/ultisnips'

" General scala editing foo (I'm not actually sure what all is in here)
Plugin 'derekwyatt/vim-scala'

" Syntax checking (mostly useful for python, as YCM has its own C++ stuff, and
" I use eclim for java/scala)
Plugin 'scrooloose/syntastic'

" Git integration with vim
Plugin 'tpope/vim-fugitive'

" Makes fugitive play nicely with eclim (specifically, :Gpush breaks without this)
Plugin 'tpope/vim-dispatch'

" Navigate code tags in a sidebar.
Plugin 'majutsushi/tagbar'

" **********************
" GENERAL VIM UX PLUGINS
" **********************

" Puts a tab-like buffer list at the top of vim
Plugin 'fholgado/minibufexpl.vim'

" A decent 256 color scheme
Plugin 'junegunn/seoul256.vim'

" Makes switching windows nicer when using tmux and vim together
Plugin 'christoomey/vim-tmux-navigator'

" Nice filesystem browsing
Plugin 'scrooloose/nerdtree'

" Press <leader>yw and <leader>pw to yank and paste windows, for easier window
" swapping
Plugin 'wesQ3/vim-windowswap'

call vundle#end()

" Allow filetype detection, plugins, and indenting
filetype plugin indent on

syntax on

" I've taken a liking to this colorscheme for the moment.
let g:seoul256_background = 233
colorscheme seoul256

" The preview window is what's on top, giving more information about the
" possible completions.  This setting makes it go away when you leave insert
" mode.
let g:ycm_autoclose_preview_window_after_insertion=1

" This specifies paths that YCM will not ask about when loading a
" .ycm_extra_conf.py file.
let g:ycm_extra_conf_globlist = ['~/classes/my_own_learning/neural_nets/*']

let g:ycm_filetype_blacklist = {
    \ 'tex': 1
    \}

let g:syntastic_python_checkers=['pyflakes']

" NERDTree shortcuts, for browsing the filesystem
noremap <leader>nt :NERDTreeToggle<CR>

" Show bookmarks by default in the NERDTree
let NERDTreeShowBookmarks = 1
let NERDTreeMapOpenVSplit = 'v'
let NERDTreeMapOpenSplit = 's'

" If all we have left is the NERDTree, close it.
autocmd bufenter * if (winnr("$") == 1
                       \ && exists("b:NERDTreeType")
                       \ && b:NERDTreeType == "primary") | q | endif

let NERDTreeIgnore = ['\.pyc$']

" Make UltiSnips play nicely with YCM.  These mappings do not work well in
" latex, so we remove the mappings for FileType tex (these contortions are
" necessary because the mapping happens at load time, while the autocommand
" runs at buffer open time - the mappings are already set, and changing
" <leader> won't do anything).
let g:UltiSnipsExpandTrigger = '<leader>f'
let g:UltiSnipsJumpForwardTrigger = '<leader>g'
let g:UltiSnipsJumpBackwardTrigger = '<leader>d'
au FileType tex call SetLatexSnippetOptions()
function SetLatexSnippetOptions()
    if exists("g:loaded_latex_options")
      return
    endif
    let g:loaded_latex_options = 1
    iunmap <leader>f
    iunmap <leader>g
    iunmap <leader>d
    inoremap <leader>,f <C-R>=UltiSnips_ExpandSnippet()<CR>
    inoremap <leader>,g <C-R>=UltiSnips_JumpForwards()<CR>
    inoremap <leader>,d <C-R>=UltiSnips_JumpBackwards()<CR>
endfunction
" Don't split on - in identifiers for autocomplete purposes when editing latex.
au FileType tex set iskeyword+=-

" MiniBufExplorer - a tab-like buffer list at the top of the page.  Use
" <leader>r to get there, like the related files plugin at Google.
noremap <leader>r :MBEFocus<CR>

" Fugitive shortcuts, for running vim commands
noremap <leader>gd :Gdiff<CR>
noremap <leader>gs :Gstatus<CR>
noremap <leader>gw :Gwrite<CR>
noremap <leader>gb :Gblame<CR>
noremap <leader>gps :Gpush<CR>
noremap <leader>gpl :Gpull<CR>

" This makes eclim play nicely with YCM.
let g:EclimCompletionMethod = 'omnifunc'

" This makes it so that eclim doesn't show TODOs as errors on the left side of
" the screen, as TODOs in eclipse come in at "sign level" 3 (task tags).  I
" wish there were a better way to do this, as some other warnings are quite
" helpful...
let g:EclimSignLevel = 2

" Some Eclim shortcuts
au FileType java nmap <leader>jc :JavaCorrect<cr>
au FileType java nmap <leader>js :JavaSearchContext<cr>
au FileType java nmap <leader>ji :JavaImport<cr>
au FileType java nmap <leader>jio :JavaImportOrganize<cr>

" Eclim disables syntastic for java files, but only if there's an active
" project in the directory.  This makes sure we don't use syntastic for java
" even if there's no project - it misses imports and in general isn't very
" good.
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': ['java'] }

" Not sure what the deal is, but YCM messed up backspace, and this fixes it
set backspace=indent,eol,start

" Show line numbers
set number

" Trying to get auto-indentation to be more like Google's style guide...
set cinoptions+=(0,w1

" When editing a file, always jump to the last curser position
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\   exe "normal! g'\""  |
\ endif
" But don't do that when editing a git commit message - go back to the
" first line
autocmd BufReadPost *COMMIT_EDITMSG exe "normal 1G"

" Hit F4 while in insert mode to do a correct paste
set pastetoggle=<F4>

" Associate *.tape files with ducttape
au BufRead,BufNewFile *.tape set filetype=ducttape

" Some python goodies
autocmd FileType python set foldlevel=1
autocmd FileType python set includeexpr=PythonIncludeExpr()
autocmd FileType python set include=^\\(from\\\\|import\\)
autocmd FileType python set path+=,~/pythonutil

" Use spaces instead of tabs everywhere, and use two spaces instead of four.
set et sw=2 sts=2

" Unless we're in python, where the convention is to use four spaces.
autocmd FileType python setlocal et sw=4 sts=4


" Enforce 80 character line widths by wrapping automatically
" And I like having an empty space on the end, so we actually make it 79
set textwidth=79

" Let lines in java be 100 characters long, as per convention
autocmd FileType java set textwidth=99
autocmd FileType scala set textwidth=99

" HTML files can have pretty long lines, let's say.
autocmd FileType htmldjango set textwidth=139

" Highlight the 81st column, if possible
if exists('+colorcolumn')
    set colorcolumn=81
    autocmd FileType java set colorcolumn=101
    autocmd FileType scala set colorcolumn=101
    autocmd FileType htmldjango set colorcolumn=141
" If it isn't, highlight any characters that go over the allowed width.
else
    au Filetype python,c,cpp,tex let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
    au Filetype java let w:m2=matchadd('ErrorMsg', '\%>100v.\+', -1)
    au Filetype htmldjango let w:m2=matchadd('ErrorMsg', '\%>140v.\+', -1)
endif

" And put an underline on the line where the cursor currently is, to save on
" searching for the cursor when switching windows.
set cursorline

" Use syntax folding for C++ because I don't have a good script for it
autocmd FileType cpp set foldmethod=syntax

" Use the skeletons when opening python and latex files
autocmd BufNewFile *.py r ~/.vim/skel.py
autocmd BufNewFile *.tex r ~/.vim/skel.tex

" Gets rid of an extra line that gets put in
autocmd BufNewFile *.py exe "normal 1Gddj"
autocmd BufNewFile *.tex exe "normal 1Gddj"

" Use django file type for html files, 'cause I don't do any other html
autocmd BufEnter *.html setfiletype htmldjango

" Include bibliography files for autocompletion purposes
autocmd FileType tex set include=\\\\input\\\\|\\\\include{\\\\|\\\\bibliography{\\\\|\\.\\.\\/\\.\\.\\/\\.\\.
autocmd FileType tex set suffixesadd=.tex,.bib
function! LatexIncludeExpr(fname)
    let fname = a:fname
    if fname[0] != "."
        let fname = "../../.." . fname
    endif
    let fname = substitute(fname, '^.\{-}{\|}.*\|,.*', '', 'g')
    return fname
endfunction
autocmd FileType tex let &l:includeexpr="LatexIncludeExpr(v:fname)"
" Also set the default foldlevel for tex to fold less stuff.
autocmd FileType tex set foldlevel=1

" Add a highlight group to look out for trailing whitespace.
" Thanks to: http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight TrailingWhitespace ctermbg=red guibg=red
autocmd colorscheme * highlight TrailingWhitespace ctermbg=red guibg=red
2match TrailingWhitespace /\s\+$/
" Explanation of the following: whitespace: \s , one or more: \+ ,
"   current cursor position: \%# , negate: \@<! , end of line: $
autocmd InsertEnter * 2match TrailingWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * 2match TrailingWhitespace /\s\+$/
autocmd BufWinEnter * 2match TrailingWhitespace /\s\+$/
" The following apparently avoids a memory leak.
autocmd BufWinLeave * call clearmatches()

" Also highlight tab characters, which are evil.
set list
set listchars=tab:\ \ ,
highlight SpecialKey ctermbg=Red guibg=Red

function! PythonIncludeExpr()
  "echo v:fname
  for dir in split(&path, ',')
    "echo dir
    if isdirectory(dir . '/' . v:fname)
      echo 'Directory found'
      return v:fname . "/__init__.py"
    endif
  endfor
  return substitute(v:fname, '\.', '/', 'g')
endfunction

" Add everything in PYTHONPATH to vim's path, for autocompletion purposes
"python << EOF
"import os
"import sys
"import vim
"for p in sys.path:
  "# Add each directory in sys.path, if it exists.
  "if os.path.isdir(p):
    "# Command 'set' needs backslash before each space.
    "vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
"EOF

" Automatically format comments when typing.  So if you type a long comment,
" vim will autowrap for you.
set formatoptions+=r
" Also continue a comment if inserting with 'O' directly under or over an
" existing comment.
set formatoptions+=o

" Get rid of the annoying default plaintex for empty .tex files
let g:tex_flavor='latex'

" Add included files to autocomplete
set complete+=i

" Make a mapping to do spellchecking
nmap <silent> <F3> :setlocal spell spelllang=en_us<cr>

" Allow lower case to match upper case search targets.
set smartcase

" Always show the status line
set laststatus=2

" Status line stuff.
set statusline=%f                         "relative filename
set statusline+=%{fugitive#statusline()}  "git branch
"set statusline+=[%{&ff}]                   "file format
set statusline+=%h                        "help file flag
set statusline+=%m                        "modified flag
set statusline+=%r                        "read only flag
" Add syntastic stuff to the status line
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
"set statusline+=%y                        "filetype
set statusline+=%=                        "left/right separator
set statusline+=%c,                       "cursor column
set statusline+=%l/%L                     "cursor line/total lines
set statusline+=\ %P                      "percent through file


" Show partial commands in the command buffer as they are being typed
set showcmd

" ReST editing stuff
function ReST_Extend_Line()
    let cur = getline(".")
    let prev = getline( line(".") - 1 )
    return repeat(cur[0], len(prev) - len(cur))
endfunction
imap <F9> <c-r>=ReST_Extend_Line()<cr>
map <F9> yypVr

" Don't use Ex mode.
map Q <nop>

" Open tagbar on the left, not the right.
let g:tagbar_left = 1

" Because I have the NERDTree open most of the time, let's use the tagbar a
" little differently.  It's mostly useful for when I want to jump to a
" particular method, and after I've jumped it just gets in the way.  So auto
" focus on open, and close it when I jump somewhere.
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

" Use <C-T> to open the tagbar
nmap <C-T> :TagbarToggle<cr>

" Make tags work better for scala
set tags=./.tags,.tags,./tags,tags
let g:tagbar_type_scala = {
    \ 'ctagstype' : 'Scala',
    \ 'kinds'     : [
        \ 'p:packages:1',
        \ 'V:values',
        \ 'v:variables',
        \ 'T:types',
        \ 't:traits',
        \ 'o:objects',
        \ 'a:aclasses',
        \ 'c:classes',
        \ 'r:cclasses',
        \ 'm:methods'
    \ ]
    \ }

" Get rid of annoying ctr-u in insert mode
imap <c-u> <nop>

" Tab completion for ex command-line (like :split)
set wildmenu
set wildmode=longest:full,full

" When at the top or bottom of the terminal, always leave 2 lines above the
" curser
set scrolloff=2

" Some folding options
set foldenable
set foldlevelstart=1
set foldopen=block,insert,hor,jump,mark,percent,quickfix,search,tag,undo

" Maps F2 to getting rid of the highlighting after a search - very nice
nmap <silent> <F2> :nohl<cr>:set spelllang=<cr>

" Maps F5 to cleaning up whitespace - convert tab characters to 4 spaces and
" remove any trailing whitespace.
nmap <F5> :%s/\s\+$//<cr>:%s/\t/    /g<cr>

" Somehow something maps C-J to something.  This will hopefully fix it.
let g:C_Ctrl_j = 'off'
let g:BASH_Ctrl_j = 'off'
nnoremap <C-J> <C-W>j

" Easier window resizing.
nmap + <C-W>+
nmap _ <C-W>-
"nmap <C-H> <C-W><
"nmap <C-L> <C-W>>

" Easier moving between windows
nmap <C-H> <C-W>h
nmap <C-L> <C-W>l
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k

set hlsearch " Highlight the last used search pattern
set ruler " show the cursor position all the time

