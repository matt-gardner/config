" Use Vim settings, rather than Vi settings (usually better).
" This must be first, because it changes other options as a side effect.
set nocompatible

syntax on

" When editing a file, always jump to the last curser position
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\   exe "normal! g'\""  |
\ endif
" But don't do that when editing a git commit message - go back to the
" first line
autocmd BufReadPost *COMMIT_EDITMSG exe "normal 1G"

" Allow filetype detection, plugins, and indenting
filetype plugin indent on

" Hit F4 while in insert mode to do a correct paste
set pastetoggle=<F4>

" For python you want 4 spaces to be a tab, and tabs should be expanded
autocmd FileType python setlocal et sw=4 sts=4
autocmd FileType python set foldlevel=1
autocmd FileType python set foldlevel=1
autocmd FileType python set includeexpr=PythonIncludeExpr()
autocmd FileType python set include=^\\(from\\\\|import\\)
autocmd FileType python set path+=,~/pythonutil

" Use syntax folding for C++ because I don't have a good script for it
autocmd FileType cpp set foldmethod=syntax

" Use the skeletons when opening python and latex files
autocmd BufNewFile *.py r ~/.vim/skel.py
autocmd BufNewFile *.tex r ~/.vim/skel.tex

" Gets rid of an extra line that gets put in
autocmd BufNewFile *.py exe "normal 1Gddj"
autocmd BufNewFile *.tex exe "normal 1Gddj"

" Use django file type for html files, 'cause I don't do any other html
autocmd BufEnter *.html setfiletype htmldjango

" For django and javascript, use spaces instead of tabs (I dislike tabs...)
autocmd FileType htmldjango setlocal et sw=4 sts=4
autocmd FileType javascript setlocal et sw=4 sts=4

" You know what, just use spaces instead of tabs everywhere
set et sw=4 sts=4

" And for latex files, use two spaces instead of four
autocmd FileType tex setlocal et sw=2 sts=2

" Include bibliography files for autocompletion purposes
autocmd FileType tex set include=\\\\input\\\\|\\\\include{\\\\|\\\\bibliography{
autocmd FileType tex set suffixesadd=.tex,.bib

" Add a highlight group to look out for trailing whitespace.
" Thanks to: http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight TrailingWhitespace ctermbg=red guibg=red
autocmd colorscheme * highlight TrailingWhitespace ctermbg=red guibg=red
2match TrailingWhitespace /\s\+$/
" Explanation of the following: whitespace: \s , one or more: \+ ,
"   current cursor position: \%# , negate: \@<! , end of line: $
autocmd InsertEnter * 2match TrailingWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * 2match TrailingWhitespace /\s\+$/
autocmd BufWinEnter * 2match TrailingWhitespace /\s\+$/
" The following apparently avoids a memory leak.
autocmd BufWinLeave * call clearmatches()

" Also highlight tab characters, which are evil.
set list
set listchars=tab:\ \ ,
highlight SpecialKey ctermbg=Red guibg=Red


function! PythonIncludeExpr()
  "echo v:fname
  for dir in split(&path, ',')
    "echo dir
    if isdirectory(dir . '/' . v:fname)
      echo 'Directory found'
      return v:fname . "/__init__.py"
    endif
  endfor
  return substitute(v:fname, '\.', '/', 'g')
endfunction

" Add everything in PYTHONPATH to vim's path, for autocompletion purposes
"python << EOF
"import os
"import sys
"import vim
"for p in sys.path:
  "# Add each directory in sys.path, if it exists.
  "if os.path.isdir(p):
    "# Command 'set' needs backslash before each space.
    "vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
"EOF

" Enforce 80 character line widths by wrapping automatically
" And I like having an empty space on the end, so we actually make it 79
set textwidth=79

" Automatically format comments when typing.  So if you type a long comment,
" vim will autowrap for you.
set formatoptions+=r
" Also continue a comment if inserting with 'O' directly under or over an
" existing comment.
set formatoptions+=o

" Get rid of the annoying default plaintex for empty .tex files
let g:tex_flavor='latex'

" Add included files to autocomplete
set complete+=i

" Make a mapping to do spellchecking
nmap <silent> <F3> :setlocal spell spelllang=en_us<cr>

" Allow lower case to match upper case search targets.
set smartcase

" Always show the status line
set laststatus=2

" Show partial commands in the command buffer as they are being typed
set showcmd

" ReST editing stuff
function ReST_Extend_Line()
    let cur = getline(".")
    let prev = getline( line(".") - 1 )
    return repeat(cur[0], len(prev) - len(cur))
endfunction
imap <F9> <c-r>=ReST_Extend_Line()<cr>
map <F9> yypVr

" Don't use Ex mode.
map Q <nop>

" Get rid of annoying ctr-u in insert mode
imap <c-u> <nop>

" Tab completion for ex command-line (like :split)
set wildmenu
set wildmode=longest:full,full

" When at the top or bottom of the terminal, always leave 2 lines above the
" curser
set scrolloff=2

" Some folding options
set foldenable
set foldlevelstart=0
set foldopen=block,insert,hor,jump,mark,percent,quickfix,search,tag,undo

" Maps F2 to getting rid of the highlighting after a search - very nice
nmap <silent> <F2> :nohl<cr>:set spelllang=<cr>

" Resize windows with + and _, instead of the C-W stuff
nmap + <C-W>+
nmap _ <C-W>-

" Use <C-T> to run :TlistToggle - the taglist plugin that shows code structure
nmap <C-T> :TlistToggle<cr>

" Tabs should be four spaces long, not eight
set sw=4
set ts=4
set hlsearch " Highlight the last used search pattern
set ruler " show the cursor position all the time

